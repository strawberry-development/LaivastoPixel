export default class LaivastoPixel{constructor(){if(this.imageCanvas=document.getElementById("imageCanvas"),this.pixelCanvas=document.getElementById("pixelCanvas"),!this.imageCanvas||!this.pixelCanvas)throw new Error("Canvas elements are required.");if(this.ctxImage=this.imageCanvas.getContext("2d"),this.ctxPixel=this.pixelCanvas.getContext("2d"),!this.ctxImage||!this.ctxPixel)throw new Error("Failed to get 2D context from canvas elements.");this.controls={imageInput:document.getElementById("imageInput"),uploadImageBtn:document.getElementById("uploadImageBtn"),resetBtn:document.getElementById("resetBtn"),downloadBtn:document.getElementById("downloadBtn"),pixelSizeRange:document.getElementById("pixelSizeRange"),brightnessRange:document.getElementById("brightnessRange"),contrastRange:document.getElementById("contrastRange"),colorPaletteSelect:document.getElementById("colorPaletteSelect")},this.originalImage=null,this.pixelSize=10,this.brightness=1,this.contrast=1,this.colorPalette="default",this.defaultPixelSize=this.pixelSize,this.defaultBrightness=this.brightness,this.defaultContrast=this.contrast,this.defaultColorPalette=this.colorPalette,this.timer=null,this.initEventListeners()}initEventListeners(){const{imageInput:t,uploadImageBtn:e,resetBtn:i,downloadBtn:a,pixelSizeRange:s,brightnessRange:n,contrastRange:l,colorPaletteSelect:o}=this.controls;e.addEventListener("click",(()=>t.click())),t.addEventListener("change",(t=>{const e=t.target.files[0];e&&this.loadImage(e).then((()=>this.enableControls(!0))).catch((t=>console.error("Error loading image:",t)))})),s&&s.addEventListener("input",(()=>{document.getElementById("pixelSizeValue").textContent=s.value,this.setPixelSize(s.value)})),n&&n.addEventListener("input",(()=>{document.getElementById("brightnessValue").textContent=n.value,this.setBrightness(n.value)})),l&&l.addEventListener("input",(()=>{document.getElementById("contrastValue").textContent=l.value,this.setContrast(l.value)})),o&&o.addEventListener("change",(()=>{this.setColorPalette(o.value)})),i.addEventListener("click",(()=>{this.resetCanvas()})),a.addEventListener("click",(()=>{this.downloadImage()}))}enableControls(t){const{pixelSizeRange:e,brightnessRange:i,contrastRange:a,colorPaletteSelect:s,resetBtn:n,downloadBtn:l}=this.controls;e.disabled=!t,i.disabled=!t,a.disabled=!t,s.disabled=!t,n.disabled=!t,l.disabled=!t,n.classList.toggle("disabled",!t),l.classList.toggle("disabled",!t)}loadImage(t){return new Promise(((e,i)=>{const a=new FileReader;a.onload=t=>{const a=new Image;a.src=t.target.result,a.onload=()=>{this.imageCanvas.width=Math.floor(a.width/this.pixelSize)*this.pixelSize,this.imageCanvas.height=Math.floor(a.height/this.pixelSize)*this.pixelSize,this.ctxImage.drawImage(a,0,0,this.imageCanvas.width,this.imageCanvas.height),this.originalImage=this.ctxImage.getImageData(0,0,this.imageCanvas.width,this.imageCanvas.height),this.applyPixelation(),e()},a.onerror=i},a.onerror=i,a.readAsDataURL(t)}))}debounce(t,e){clearTimeout(this.timer),this.timer=setTimeout(t.bind(this),e)}setPixelSize(t){this.pixelSize=Math.max(1,parseInt(t,10)),this.debounce(this.applyPixelation.bind(this),50)}setBrightness(t){this.brightness=parseFloat(t),this.debounce(this.applyPixelation.bind(this),50)}setContrast(t){this.contrast=parseFloat(t),this.debounce(this.applyPixelation.bind(this),50)}setColorPalette(t){this.colorPalette=t,this.applyPixelation()}applyPixelation(){if(!this.originalImage)return;const t=Math.floor(this.pixelSize),{width:e,height:i}=this.originalImage;this.pixelCanvas.width=e,this.pixelCanvas.height=i,this.ctxPixel.clearRect(0,0,e,i);const a=this.originalImage.data,s=Math.floor(i/t),n=Math.floor(e/t);let l=0;(()=>{for(let i=0;i<s;i++){for(let s=0;s<n;s++){const n=s*t,l=i*t,o=[0,0,0];this.getAverageColor(a,n,l,e,t,o);const h=this.adjustColor(o),r=this.applyPalette(h);this.ctxPixel.fillStyle=`rgb(${r[0]}, ${r[1]}, ${r[2]})`,this.ctxPixel.fillRect(n,l,t,t)}l+=t}})()}getAverageColor(t,e,i,a,s,n){let l=0,o=0,h=0;const r=s*s,d=4*(i*a+e);for(let e=0;e<s;e++)for(let i=0;i<s;i++){const s=d+4*(e*a+i);l+=t[s],o+=t[s+1],h+=t[s+2]}n[0]=l/r,n[1]=o/r,n[2]=h/r}adjustColor([t,e,i]){return[Math.min(255,Math.max(0,Math.round(this.contrast*(t*this.brightness)))),Math.min(255,Math.max(0,Math.round(this.contrast*(e*this.brightness)))),Math.min(255,Math.max(0,Math.round(this.contrast*(i*this.brightness))))]}applyPalette(t){return{default:t,grayscale:this.toGrayscale(t),pastel:this.toPastel(t),negative:this.toNegative(t),sepia:this.toSepia(t),vibrant:this.toVibrant(t),retro:this.toRetro(t),neon:this.toNeon(t),muted:this.toMuted(t)}[this.colorPalette]||t}toGrayscale([t,e,i]){const a=(t+e+i)/3;return[a,a,a]}toPastel([t,e,i]){return[Math.min(255,t+100),Math.min(255,e+100),Math.min(255,i+100)]}toNegative([t,e,i]){return[255-t,255-e,255-i]}toSepia([t,e,i]){return[Math.min(255,.393*t+.769*e+.189*i),Math.min(255,.349*t+.686*e+.168*i),Math.min(255,.272*t+.534*e+.131*i)]}toVibrant([t,e,i]){return[Math.min(255,1.2*t),Math.min(255,1.2*e),Math.min(255,1.2*i)]}toRetro([t,e,i]){return[t<128?1.2*t:.8*t,e<128?1.2*e:.8*e,i<128?1.2*i:.8*i]}toNeon([t,e,i]){return[Math.min(255,t+100),Math.min(255,e+100),Math.min(255,i+100)]}toMuted([t,e,i]){return[.8*t,.8*e,.8*i]}resetCanvas(){this.originalImage&&(this.pixelSize=this.defaultPixelSize,this.brightness=this.defaultBrightness,this.contrast=this.defaultContrast,this.colorPalette=this.defaultColorPalette,this.controls.pixelSizeRange&&(this.controls.pixelSizeRange.value=this.defaultPixelSize,document.getElementById("pixelSizeValue").textContent=this.defaultPixelSize,this.setPixelSize(this.defaultPixelSize)),this.controls.brightnessRange&&(this.controls.brightnessRange.value=this.defaultBrightness,document.getElementById("brightnessValue").textContent=this.defaultBrightness,this.setBrightness(this.defaultBrightness)),this.controls.contrastRange&&(this.controls.contrastRange.value=this.defaultContrast,document.getElementById("contrastValue").textContent=this.defaultContrast,this.setContrast(this.defaultContrast)),this.controls.colorPaletteSelect&&(this.controls.colorPaletteSelect.value=this.defaultColorPalette,this.setColorPalette(this.defaultColorPalette)),this.applyPixelation())}downloadImage(){const t=document.createElement("a");t.href=this.pixelCanvas.toDataURL("image/png"),t.download="pixelated_image.png",t.click()}}