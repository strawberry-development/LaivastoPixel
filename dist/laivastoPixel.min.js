export default class LaivastoPixel{constructor(t,e,i){if(this.imageCanvas=t,this.pixelCanvas=e,!this.imageCanvas||!this.pixelCanvas)throw new Error("Canvas elements are required.");this.ctxImage=this.imageCanvas.getContext("2d"),this.ctxPixel=this.pixelCanvas.getContext("2d"),this.controls=i,this.originalImage=null,this.pixelSize=10,this.brightness=1,this.contrast=1,this.colorPalette="default",this.defaultPixelSize=this.pixelSize,this.defaultBrightness=this.brightness,this.defaultContrast=this.contrast,this.defaultColorPalette=this.colorPalette,this.initEventListeners()}initEventListeners(){const{pixelSizeRange:t,brightnessRange:e,contrastRange:i,colorPaletteSelect:s}=this.controls;t&&t.addEventListener("input",(()=>this.setPixelSize(t.value))),e&&e.addEventListener("input",(()=>this.setBrightness(e.value))),i&&i.addEventListener("input",(()=>this.setContrast(i.value))),s&&s.addEventListener("change",(()=>this.setColorPalette(s.value)))}loadImage(t){return new Promise(((e,i)=>{const s=new FileReader;s.onload=t=>{const s=new Image;s.src=t.target.result,s.onload=()=>{this.imageCanvas.width=s.width,this.imageCanvas.height=s.height,this.ctxImage.drawImage(s,0,0),this.originalImage=this.ctxImage.getImageData(0,0,s.width,s.height),this.applyPixelation(),e()},s.onerror=i},s.readAsDataURL(t)}))}setPixelSize(t){this.pixelSize=parseInt(t,10),this.applyPixelation()}setBrightness(t){this.brightness=parseFloat(t),this.applyPixelation()}setContrast(t){this.contrast=parseFloat(t),this.applyPixelation()}setColorPalette(t){this.colorPalette=t,this.applyPixelation()}applyPixelation(){if(!this.originalImage)return;const t=this.pixelSize,{width:e,height:i}=this.originalImage;this.pixelCanvas.width=e,this.pixelCanvas.height=i,this.ctxPixel.clearRect(0,0,e,i);const s=this.originalImage.data,a=[0,0,0];for(let n=0;n<i;n+=t)for(let i=0;i<e;i+=t){this.getAverageColor(s,i,n,e,t,a);const l=this.adjustColor(a),h=this.applyPalette(l);this.ctxPixel.fillStyle=`rgb(${h[0]}, ${h[1]}, ${h[2]})`,this.ctxPixel.fillRect(i,n,t,t)}}getAverageColor(t,e,i,s,a,n){let l=0,h=0,o=0;const r=a*a,g=4*(i*s+e);for(let e=0;e<a;e++)for(let i=0;i<a;i++){const a=g+4*(e*s+i);l+=t[a],h+=t[a+1],o+=t[a+2]}n[0]=l/r,n[1]=h/r,n[2]=o/r}adjustColor([t,e,i]){return[Math.min(255,Math.max(0,this.contrast*(t*this.brightness))),Math.min(255,Math.max(0,this.contrast*(e*this.brightness))),Math.min(255,Math.max(0,this.contrast*(i*this.brightness)))]}applyPalette(t){return{default:t,grayscale:this.toGrayscale(t),pastel:this.toPastel(t),negative:this.toNegative(t),sepia:this.toSepia(t),vibrant:this.toVibrant(t),retro:this.toRetro(t),neon:this.toNeon(t),muted:this.toMuted(t)}[this.colorPalette]||t}toGrayscale([t,e,i]){const s=(t+e+i)/3;return[s,s,s]}toPastel([t,e,i]){return[Math.min(255,t+100),Math.min(255,e+100),Math.min(255,i+100)]}toNegative([t,e,i]){return[255-t,255-e,255-i]}toSepia([t,e,i]){return[Math.min(255,.393*t+.769*e+.189*i),Math.min(255,.349*t+.686*e+.168*i),Math.min(255,.272*t+.534*e+.131*i)]}toVibrant([t,e,i]){return[Math.min(255,1.2*t),Math.min(255,1.2*e),Math.min(255,1.2*i)]}toRetro([t,e,i]){return[t<128?1.2*t:.8*t,e<128?1.2*e:.8*e,i<128?1.2*i:.8*i]}toNeon([t,e,i]){return[Math.min(255,t+100),Math.min(255,e+100),Math.min(255,i+100)]}toMuted([t,e,i]){return[.8*t,.8*e,.8*i]}resetCanvas(){this.originalImage&&(this.pixelSize=this.defaultPixelSize,this.brightness=this.defaultBrightness,this.contrast=this.defaultContrast,this.colorPalette=this.defaultColorPalette,this.controls.pixelSizeRange&&(this.controls.pixelSizeRange.value=this.defaultPixelSize,document.getElementById("pixelSizeValue").textContent=this.defaultPixelSize,this.setPixelSize(this.defaultPixelSize)),this.controls.brightnessRange&&(this.controls.brightnessRange.value=this.defaultBrightness,document.getElementById("brightnessValue").textContent=this.defaultBrightness,this.setBrightness(this.defaultBrightness)),this.controls.contrastRange&&(this.controls.contrastRange.value=this.defaultContrast,document.getElementById("contrastValue").textContent=this.defaultContrast,this.setContrast(this.defaultContrast)),this.controls.colorPaletteSelect&&(this.controls.colorPaletteSelect.value=this.defaultColorPalette,this.setColorPalette(this.defaultColorPalette)),this.applyPixelation())}downloadImage(){const t=document.createElement("a");t.href=this.pixelCanvas.toDataURL("image/png"),t.download="pixelated_image.png",t.click()}}